{{../markdown_header.txt}}

# Matlab: Functions and Scripts

**Scripts** are simply collections of commands that are run as if they were typed at the command prompt.

* They are rarely used b/c their contents is not *encapsulated*.

**Functions** are similar to scripts with one crucial difference:

* All variables inside a function are **private**.
* Other functions cannot see the variables inside a function (*encapsulation*).
* Any variable a function should know must be passed to it as an input argument.
* Any variable to be retained after the function finishes must be passd out of it as a return argument. 

> Always use functions, never scripts!

An important principle of structured programming: 

>**Package a well-defined task into a function with a simple interface.**

Even built-in Matlab commands are often written in Matlab.

Try `open sub2ind`. You get to see (and you can modify) the source code for the built-in `sub2ind`  command (`sub2ind.m`).

Now try `open zeros`. This opens `zeros.m`. 

* you get an m-file that is blank except for comments

* this means: `zeros` is not written in Matlab (it's truly built-in)

## The Matlab Path [mpath] ##

Matlab commands are stored in text files with the extension ''m''. 

When the user issues a command, such as `m = zeros([3,4]))`, Matlab searches
for a matching m-file, in this case `zeros.m` and runs it. 

It does not matter whether `zeros` is a built-in command or an m-file written by a user.

Where Matlab looks is defined by the `matlab path`.

This is a list of directories that Matlab goes through when it looks for functions.
In case you wonder, this is done as a `cell array` of strings.

You can see what's on the path by typing `path`.

You add directories to the path with `addpath`.

In addition, Matlab searches the current directory (the one shown in the file browser).

Therefore, every time you write new code, you need to put the directories on the `path` before the code can be called.

There is no way to allow one function to access some code without changing the `path` globally. This differs from other languages. It makes it hard to organize code.

Every project therefore needs a startup routine that adds its directory to the Matlab path.
Or its program files need to be placed in the current working directory.

## Organizing Code ##

When you write new commands, you need to make sure Matlab can find them. 
This is best accomplished in two ways:

1. For files that belong to the one particular project, place them in a project directory.
Then switch the current directory to that directory using `cd`.

	Or put the directory on the `path`	

2. For files that are **shared** between several projects, place them in a special directory (`blah/shared`).
Place this directory on the path: `addpath('blah/shared')` .

Over time you will write many general purpose routines that should be stored in this `shared` directory.

#### Name Conflicts ####

Now you run into a problem: **name conflicts**.

Each time you write a new function, you need to make sure that there is no other function with the same name.

There are 2 ways of ensuring this:

1. Suffixes: For each project, invent a suffix and append it to every function name.

	Such as `plot_821.m`

2. Packages: If you place an m-file into a directory that starts with `+`, let's say `+plot_821`, you can access it like this: `plot_821.plot(x)`.

	For this to work, the parent dir of `+plot_821`  must be on the `path`.	


##Example of a Function

Imagine we want to compute the sum of 3 variables.

Type the following code in a text editor: 

````matlab
function xSum = sum3(x1, x2, x3);
% This function sums 3 variables
sum1 = x1 + x2;
xSum = sum1 + x3;
end
````

Save it as `sum3.m` in a directory Matlab knows to find.

Row 1 defines the name of the function, its input arguments and its output arguments.

Row 2 is a comment starting with %. Matlab ignores it.

Rows 3 and 4 contain the commands to be executed.

To run `sum3.m`:
At the command prompt type 

	sum3(1, 2, 3)
	ans =
	6

To illustrate that the variables inside sum3.m are private, try typing sum1 at the command prompt. The result: 

	??? Undefined function or variable 'sum1'.

Matlab complains that variable sum1 does not exist.

sum1 was visible inside of sum3.m, but not outside of it.

##More on Private Variables

Variables inside of sum3.m are also not visible in functions called from within sum3.m

**Example**

Modify sum3.m to read: 

	function xSum = sum3(x1, x2, x3);
		sum1 = x1 + x2;
		sum3sub;
		xSum = sum1 + x3;
	end

Then create the function: 

	function sum3sub
		disp(sum1)
	end

Running sum3.m results in an error: sum1 is not found.

##Global Variables

To make a variable visible from anywhere, define it as a global (in sum3.m and sum3sub.m): 

	global sum1;

Now running sum3.m does not yield an error message.

>Remark: Avoid globals where possible. 

>A function should be a self-contained unit with a clear interface to the outside world (via its input and output arguments). 

>Globals create confusion.

## Passing by Value ##

In Matlab, all function arguments are passed **by value**.

That means, Matlab creates a copy of the variable and passes it to the function.

However, Matlab is smart enough not to create a copy when the function does not change the variable ("copy on change").

Still, this can be very inefficient. If you pass a gigantic array to a function and change one element inside the function, the entire array needs to be copied. 

There is no way of passing by reference.

# Examples

## Example: Cobb-Douglas production function

This is a general purpose [Cobb-Douglas function](https://github.com/hendri54/shared/blob/master/%2BeconLH/cobb_douglas.m)

Notable features:

* block comment describing inputs and outputs

	this is all the rest of the world needs to know about the function

* a unique name

* self-test code governed by debugging switch `dbg`

##Example: Finding the Zero of a Function

Task: Find the solution to the equation \\(f(x)=\ln(x)-5=0 \\).

Set up a function that returns the deviation f(x)

	function dev = dev1_821(x);
	dev = log(x) - 5;
	end

Use the built-in function [`fzero`](http://www.mathworks.com/help/matlab/ref/fzero.html) to search for the solution: 

	fzero('dev1_821', [0.1 100])
	ans =
	7.3891

#Example: Two period household

Household solves \\(\max u\left(c,g\right)\\)

subject to \\(y=c+s \\) and \\(g=z+sR\\)

A solution: \\(c,g,s\\)

that solve 2 budget constraints and Euler equation

\\(u_{c}=u_{g} R \\)

Assume \\(u\left(c,g\right)=\frac{c^{1-\sigma}}{1-\sigma}+\beta\frac{g^{1-\sigma}}{1-\sigma} \\)

###Pseudo code

This is not a trivial program to write. So we break it down into trivial steps.

See [Tips on programming](programming.html)

We design top-down.

####Level 1:

Task: Find optimal \\(c\\).

1. Set parameters. Set up a grid of values for c
2. For each c: Calculate deviation from Euler equation.
3. Find the c with the smallest deviation.

> Note: Usually one would not restrict \\(c\\) to lie on a grid.

####Level 2:

Task: Calculate deviation from Euler equation.

Given: guess for \\(c\\), parameter values

1. Use budget constraints to calculate \\(s,g\\)
2. Return deviation: \\( dev=u_{c}-u_{g}R \\)

####Level 3:

Utility function.

* Return \\(u_{c} \\) and \\(u_{g} \\)
* for given \\(c,g\\) and parameters.

###Code

We write the code bottom up.

Utility function:
Allow matrix inputs (cM, gM).
Parameters as arguments. 

```matlab
function [ucM, ugM] = ces_util_x1(cM, gM, bb, sig);
% CES marginal utility when young, old
	uM = (cM .^ (1-sig) + bb .* gM .^ (1-sig)) ./ (1-sig);
	ucM = (1-sig) .* uM ./ cM;
	ugM = (1-sig) .* uM ./ gM;
end
```

Deviation function:

```matlab
function dev = ee_dev_x1(c, y, z, R, bb, sig);
% EE deviation
% Get s, g from budget constraints
	s = y - c;
	g = z + R .* s;
	if g <= 0
		% c not feasible
		dev = 1e8;
	else
		[uc, ug] = ces_util_x1(c, g, bb, sig);
		dev = uc - ug .* R;
	end
end
```

Main routine:

```matlab
function hh_x1(y, z, R, bb, sig)
% Solve 2 period hh problem
	% Set up range of c values
	ng = 50;
	cGridV = linspace(0, y, ng);
	% Calculate deviation for each grid point
	devV = zeros(1,ng);
	for ig = 1 : ng
		devV(ig) = ee_dev_x1(cGridV(ig),y,z,R,bb,sig);
	end
	% Pick the smallest deviation
	[devMin, idxMin] = min(abs(devV));
	disp(sprintf('c = %f   Dev = %f', cGridV(idxMin), devMin));
end
```

----------