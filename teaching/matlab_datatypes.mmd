{{../markdown_header.txt}}

#Matlab: Data Types

Matlab knows the following data types:

1. **Matrices** of floating point numbers.
Vectors and scalars are special cases. 

2. Text **strings**.
These are really vectors of characters to Matlab. 
3. **Structures**.

4. **Cell** arrays.

Then there are more specialized datatypes such as `tables`.

The type of a variable is **not fixed**.

	a = 1;
	a = 'a string';

is perfectly fine code (and a popular source of errors).

##Vectors

To create a vector, simply fill it with values: 

	a = [1, 2, 3];
	disp(a);
	1 2 3

Matlab knows row and column vectors: 

	b = [1; 2; 3];
	disp(b);
	1
	2
	3
	disp(a*b);
	14

###The colon operator

To extract elements from a vector, use the colon: 

	disp(1 : 4);
	1 2 3 4
	disp(1 : 3 : 10);
	1 4 7 10
	a = 11 : 20;  disp(a(2 : 2 : 6));
	12 14 16

Any vector can be used to index elements: 

	idxV = [2 5 8];  disp(a(idxV));
	12 15 18

##Matrices

To create a matrix, simply fill it with values. 

	a = [1 2 3; 4 5 6];  disp(a);
	1 2 3
	4 5 6

Many commands work directly on matrices. 

	a = [1 2 3]; b = [2; 1; 1]; disp(a * b);
	7
	disp(b * a);
	2 4 6
	1 2 3
	1 2 3

To extract elements: 

	c = b*a;  disp(c(1:2, 2:3));
	4 6
	2 3

To extract all elements: 

	disp(c(1,:));
	2 4 6

But note: c(:) yields all elements flattened into a vector! 

	disp(c(:)');
	2 1 1 4 2 2 6 3 3

To extract a list of elements, use `sub2ind`.

```matlab
c = [1 2 3; 4 5 6];
idxV = sub2ind(size(c), [1,2], [2,3]);
>> c(idxV)

ans =

     2     6

>> disp([c(1,2), c(2,3)])
     2     6
```

### Matrix Pitfalls ###

#### Incorrect Indexing ####

```matlab
	c = [1 2 3; 4 5 6]; disp(c(5))
	3
```

`c(5)` should be a syntax error, but instead yields the 5th element of the flattened `c(:)` matrix!

####Matrix dimensions change when you add elements.

```matlab
>> x=1;
>> x(2,2) = 2

x =

     1     0
     0     2
```

This is a common source of bugs and one of the most counterproductive features of Matlab.     

##Multi-dimensional matrices

Matlab matrices can have more than 2 dimensions. 

	a = rand([3,2,5]); 
	size(a)
	ans =
	3     2     5

	a(:,:,3)
	ans =
	0.9218    0.4057
	0.7382    0.9355
	0.1763    0.9169

Sub-matrices work just like ordinary 2-dimensional matrices.

But: `a(:,1,:)` is not a 2D matrix. It's a 3D matrix with a singleton 2nd dimension.

##Structures

Structures are containers for variables of different types.

####Example:

Store the contact information for a person. 

	contactS.Name = 'John Doe';
	contactS.Age = 37;

A structure is defined by assigning values to it.
The elements are accessed by name: 

	disp(contactS.Age);
	37

####Where structures are useful

Use a structure to pass a large number of arguments to a function.

* Example: Set of parameters and prices for solving a household problem.
* Example: Our models store all fixed parameters in a structure that is passed to essentially all functions. 

Structures can make code robust against changes.

* Example: Add a preference parameter to the model. Only the household code needs to be changed. Other programs use the same structure to look up model parameters.

##Text Strings

To Matlab, a text string is a vector of characters. And a character is represented by a number.

Therefore: most vector operations work on text strings.

Example:

	myName = 'Hendricks'; disp(myName(5:8));
	rick
	disp(myName(5) == 'r');
	1

###sprintf

sprintf produces formatted text from (usually) numerical inputs.

The syntax is almost the same as in C. Read the manual for details.

Example:

	sprintf('Integer: %i. Float: %5.2f. String: %s', 5, 3.71, 'test')
	ans =
	Integer: 5. Float: 3.71. String: test

## Numeric Precision ##

By default, numeric variables are stored as `double` (double precision float, 64 bit).

Even if you define `x=1`, it is a `double`.

```
>> x=1;
>> class(x)

ans =

double
```

If you work with large (simulated) datasets, you may want to store matrices in formats that take less storage.

```matlab
>> x = ones([1,3], 'uint8')

x =

    1    1    1
```

This leads to some nice opportunities for errors about which Matlab helpfully does not complain (another Matlab bug).

```
>> x(2)=1e5

x =

    1  255    1
```

The number assigned to `x` was too large for an 8 bit integer. It gets truncated without warning.

Worse, applying common numeric operations to integers returns integers:

```matlab
>> y = x/2

y =

    1  128    1

>> class(y)

ans =

uint8
```

> Rule of thumb: Store large datsets in low precision. Make everything double the moment you load it.

# User Defined Data Types #

It is possible to define new data types. See the Matlab documentation on [object oriented programming](http://www.mathworks.com/help/matlab/object-oriented-programming.html).

`classdef` really defines a `struct` with certain required fields.

Benefits: 

* automatically ensures that each object has the right fields
* can define `methods` (functions) that operate on the object.

-----------